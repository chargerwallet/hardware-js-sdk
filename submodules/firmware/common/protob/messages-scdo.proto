syntax = "proto2";
package hw.trezor.messages.scdo;

// Sugar for easier handling in Java
option java_package = "com.satoshilabs.trezor.lib.protobuf";
option java_outer_classname = "TrezorMessageScdo";

/**
 * Request: Ask device for Scdo address(account_id) corresponding to address_n path
 * @start
 * @next ScdoAddress
 */
message ScdoGetAddress {
    repeated uint32 address_n = 1;      // BIP-32-style path to derive the key from master node
    optional bool show_display = 2;     // optionally prompt for confirmation display
}

/**
 * Response: Contains an Ton address calculated from hash(initial code, initial state)
 * @end
 */
message ScdoAddress {
    required string address = 1;        // ton base64 user-friendly url-safe address
}

/**
 * Request: Ask the device to sign transaction
 * @start
 * @next ScdoSignedTx
 * @next Failure
 */
message ScdoSignTx {
    repeated uint32 address_n = 1;                      // BIP-32 path to derive the key from master node
    required bytes nonce = 2;                           // <=256 bit unsigned big endian
    required bytes gas_price = 3;                       // <=256 bit unsigned big endian (in wei)
    required bytes gas_limit = 4;                       // <=256 bit unsigned big endian
    required string to = 5;                             // recipient address
    required bytes value = 6;                           // <=256 bit unsigned big endian (in wei)
    optional bytes timestamp = 7;                       // The initial data chunk (<= 1024 bytes)
    optional bytes data_initial_chunk = 8 [default='']; // The initial data chunk (<= 1024 bytes)
    optional uint32 data_length = 9 [default=0];        // Length of transaction payload
    optional uint32 tx_type = 10[default=0];
}

/**
 * Response: Device asks for more data from transaction payload, or returns the signature.
 * If data_length is set, device awaits that many more bytes of payload.
 * Otherwise, the signature_* fields contain the computed transaction signature. All three fields will be present.
 * @end
 * @next ScdoTxAck
 */
message ScdoSignedTx {
    optional uint32 data_length = 1;    // Number of bytes being requested (<= 1024)
    optional bytes signature = 2;   // signature of the message
}

/**
 * Request: Transaction payload data.
 * @next ScdoTxRequest
 */
message ScdoTxAck {
    optional bytes data_chunk = 1;  // Bytes from transaction payload (<= 1024 bytes)
}

/**
 * Request: Ask device to sign message
 * @start
 * @next ScdoMessageSignature
 * @next Failure
 */
message ScdoSignMessage {
    repeated uint32 address_n = 1;  // BIP-32 path to derive the key from master node
    optional bytes message = 2;     // message to be signed
}

/**
 * Response: Signed message
 * @end
 */
message ScdoSignedMessage {
    optional bytes signature = 1;   // signature of the message
    optional string address = 2;     // address used to sign the message
}